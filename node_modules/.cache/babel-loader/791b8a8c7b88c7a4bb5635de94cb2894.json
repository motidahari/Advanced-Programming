{"ast":null,"code":"var _jsxFileName = \"/Users/motidahari/projects/inventory/client/src/Pages/Products/GapsTable.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useMemo } from 'react';\nimport { AuthContext } from '../../context/auth';\nimport { Typography } from '@mui/material';\nimport { PageHeaderContainer } from '../../styles/styledComponents';\nimport products from './../../requests/products';\nimport StyledDataGrid from '../../components/StyledDataGrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GapsTable = _ref => {\n  _s();\n\n  let {\n    warehouse\n  } = _ref;\n  // const { state: allGaps, error, setState } = useFetchData(products.getGaps);\n  const {\n    user,\n    token\n  } = useContext(AuthContext);\n  const userAction = {\n    userId: user.id,\n    token: token\n  };\n  const [allGaps, setAllGaps] = useState([]);\n\n  const getGapsByLocation = async warehouse => {\n    const location = {\n      locationId: warehouse\n    };\n    const result = await products.getGaps(userAction, location); // console.log('result', result);\n\n    setAllGaps(result);\n  };\n\n  useEffect(() => {\n    if (warehouse.length > 0) {\n      getGapsByLocation(warehouse);\n    }\n  }, [warehouse]);\n  const columns = useMemo(() => [{\n    field: 'productName',\n    headerName: 'Product Name',\n    sortable: false,\n    flex: 0.4,\n    minWidth: 100,\n    renderCell: row => /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"neutral.900\",\n      children: row.row.productName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }, this)\n  }, {\n    field: 'quantityInLocation',\n    headerName: 'Total Quantity in location',\n    sortable: false,\n    flex: 0.4,\n    minWidth: 100,\n    renderCell: row => /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"neutral.900\",\n      children: row.row.quantityInLocation ? row.row.quantityInLocation : 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this)\n  }, {\n    field: 'quantity',\n    headerName: 'Supposed Quantity',\n    sortable: false,\n    flex: 0.4,\n    minWidth: 100,\n    renderCell: row => /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"neutral.900\",\n      children: row.row.quantity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }, this)\n  }, {\n    field: 'gap',\n    headerName: 'Gap',\n    sortable: false,\n    flex: 0.4,\n    minWidth: 100,\n    renderCell: row => /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"neutral.900\",\n      children: row.row.gap ? row.row.gap : row.row.quantity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }, this)\n  }], []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeaderContainer, {\n      sx: {\n        mt: 5,\n        mb: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        sx: {\n          m: 1\n        },\n        variant: \"h4\",\n        children: \"Gaps\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledDataGrid, {\n      rows: allGaps,\n      columns: columns,\n      getRowId: row => row.gapId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GapsTable, \"hwq05iV2ot6merV6ZRwv22FTnU8=\");\n\n_c = GapsTable;\nexport default GapsTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"GapsTable\");","map":{"version":3,"sources":["/Users/motidahari/projects/inventory/client/src/Pages/Products/GapsTable.jsx"],"names":["React","useState","useContext","useEffect","useMemo","AuthContext","Typography","PageHeaderContainer","products","StyledDataGrid","GapsTable","warehouse","user","token","userAction","userId","id","allGaps","setAllGaps","getGapsByLocation","location","locationId","result","getGaps","length","columns","field","headerName","sortable","flex","minWidth","renderCell","row","productName","quantityInLocation","quantity","gap","mt","mb","m","gapId"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useMemo } from 'react';\nimport { AuthContext } from '../../context/auth';\nimport { Typography } from '@mui/material';\nimport { PageHeaderContainer } from '../../styles/styledComponents';\nimport products from './../../requests/products';\nimport StyledDataGrid from '../../components/StyledDataGrid';\n\nconst GapsTable = ({ warehouse }) => {\n  // const { state: allGaps, error, setState } = useFetchData(products.getGaps);\n  const { user, token } = useContext(AuthContext);\n  const userAction = {\n    userId: user.id,\n    token: token,\n  };\n\n  const [allGaps, setAllGaps] = useState([]);\n  const getGapsByLocation = async warehouse => {\n    const location = {\n      locationId: warehouse,\n    };\n    const result = await products.getGaps(userAction, location);\n    // console.log('result', result);\n    setAllGaps(result);\n  };\n\n  useEffect(() => {\n    if (warehouse.length > 0) {\n      getGapsByLocation(warehouse);\n    }\n  }, [warehouse]);\n\n  const columns = useMemo(\n    () => [\n      {\n        field: 'productName',\n        headerName: 'Product Name',\n        sortable: false,\n        flex: 0.4,\n        minWidth: 100,\n        renderCell: row => (\n          <Typography color=\"neutral.900\">{row.row.productName}</Typography>\n        ),\n      },\n      {\n        field: 'quantityInLocation',\n        headerName: 'Total Quantity in location',\n        sortable: false,\n        flex: 0.4,\n        minWidth: 100,\n        renderCell: row => (\n          <Typography color=\"neutral.900\">\n            {(row.row.quantityInLocation ? row.row.quantityInLocation : 0)}\n          </Typography>\n        ),\n      },\n      {\n        field: 'quantity',\n        headerName: 'Supposed Quantity',\n        sortable: false,\n        flex: 0.4,\n        minWidth: 100,\n        renderCell: row => (\n          <Typography color=\"neutral.900\">{row.row.quantity}</Typography>\n        ),\n      },\n      {\n        field: 'gap',\n        headerName: 'Gap',\n        sortable: false,\n        flex: 0.4,\n        minWidth: 100,\n        renderCell: row => (\n          <Typography color=\"neutral.900\">{(row.row.gap ? row.row.gap : row.row.quantity)}</Typography>\n        ),\n      },\n    ],\n    []\n  );\n\n  return (\n    <>\n      <PageHeaderContainer sx={{ mt: 5, mb: 3 }}>\n        <Typography sx={{ m: 1 }} variant=\"h4\">\n          Gaps\n        </Typography>\n      </PageHeaderContainer>\n\n      <StyledDataGrid\n        rows={allGaps}\n        columns={columns}\n        getRowId={row => row.gapId}\n      />\n    </>\n  );\n};\n\nexport default GapsTable;\n"]},"metadata":{},"sourceType":"module"}