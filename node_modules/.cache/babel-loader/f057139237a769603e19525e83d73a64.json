{"ast":null,"code":"import requests from \"./requests.js\";\nimport axios from \"axios\";\nconst officeEquipment = {\n  addOfficeEquipment: async (userAction, officeEquipment) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      },\n      body: JSON.stringify(officeEquipment)\n    };\n    const result = await fetch(requests.OfficeEquipment.addOfficeEquipment, requestOptions).then(async response => {\n      var _response$headers$get;\n\n      const isJson = (_response$headers$get = response.headers.get('content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  deleteOfficeEquipmentById: async (userAction, officeEquipment) => {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      },\n      body: JSON.stringify(officeEquipment)\n    };\n    const result = await fetch(requests.OfficeEquipment.DeleteOfficeEquipment, requestOptions).then(async response => {\n      var _response$headers$get2;\n\n      const isJson = (_response$headers$get2 = response.headers.get('content-type')) === null || _response$headers$get2 === void 0 ? void 0 : _response$headers$get2.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  getAllOfficeEquipment: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      }\n    };\n    const result = await fetch(requests.OfficeEquipment.GetAll, requestOptions).then(async response => {\n      var _response$headers$get3;\n\n      const isJson = (_response$headers$get3 = response.headers.get('content-type')) === null || _response$headers$get3 === void 0 ? void 0 : _response$headers$get3.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  }\n};\nexport default officeEquipment;","map":{"version":3,"sources":["/Users/motidahari/projects/inventoryProject/client/src/requests/officeequipment.js"],"names":["requests","axios","officeEquipment","addOfficeEquipment","userAction","requestOptions","method","headers","token","userId","body","JSON","stringify","result","fetch","OfficeEquipment","then","response","isJson","get","includes","data","json","ok","error","errors","status","Promise","reject","catch","deleteOfficeEquipmentById","DeleteOfficeEquipment","getAllOfficeEquipment","GetAll"],"mappings":"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","sourcesContent":["import requests from \"./requests.js\";\nimport axios from \"axios\";\n\n\nconst officeEquipment = {\n    addOfficeEquipment: async (userAction, officeEquipment) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            },\n            body: JSON.stringify(officeEquipment)\n        };\n        const result = await fetch(requests.OfficeEquipment.addOfficeEquipment, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    deleteOfficeEquipmentById: async (userAction, officeEquipment) => {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            },\n            body: JSON.stringify(officeEquipment)\n        };\n        const result = await fetch(requests.OfficeEquipment.DeleteOfficeEquipment, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    getAllOfficeEquipment: async (userAction) => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            }\n        };\n        const result = await fetch(requests.OfficeEquipment.GetAll, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n};\n\n\nexport default officeEquipment"]},"metadata":{},"sourceType":"module"}