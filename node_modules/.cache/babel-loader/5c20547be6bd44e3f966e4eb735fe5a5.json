{"ast":null,"code":"var _jsxFileName = \"/Users/motidahari/projects/test/client/src/App.js\";\nimport React from 'react';\nimport MediaCard from './MediaCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getQ = () => {\n  return Q[Math.random() * Q.length | 0];\n};\n\nconst getRandomPointer = () => {\n  return parseInt(Math.random() * 20);\n};\n\nconst getRandom2Exponent = max => {\n  return parseInt((Math.random() + 1) * max);\n};\n\nconst getPow = pow => {\n  return Math.pow(2, pow);\n};\n\nconst hex2bin = hex => {\n  return '00' + parseInt(hex, 16).toString(2);\n};\n\nconst random_hex_color_code = () => {\n  let n = (Math.random() * 0xfffff * 1000000).toString(16);\n  return n.slice(0, 6);\n};\n\nconst random_decimal_color_code = () => {\n  return Math.floor(10000000 + Math.random() * 90000000);\n};\n\nconst xor = (a, b, n) => {\n  let ans = \"\"; // Loop to iterate over the\n  // Binary Strings\n\n  for (let i = 0; i < n; i++) {\n    // If the Character matches\n    if (a[i] == b[i]) ans += \"0\";else ans += \"1\";\n  }\n\n  return ans;\n};\n\nconst q1 = () => {\n  let expNume = getRandom2Exponent(8);\n  let expResult = getPow(expNume);\n  const Qnumber = 1;\n  const RandomPointer1 = getRandomPointer();\n  const RandomPointer2 = getRandomPointer();\n  const numPoiners = expResult / 4;\n  let q = `גודל בלוק הוא ${expResult} = ${expNume}^2 ומצביע הוא בגודל 4 בתים.\n  ישנם ${RandomPointer1} מצביעים ישירים ו-${RandomPointer2} מצביעים עקיפים מסוג single indirect\n  מהוא גודל הקובץ המקסימלי במערכת קבצים זו?  \n  `;\n  const answer = `(${RandomPointer1} + ${RandomPointer2} * ${numPoiners}) * ${expResult} = ` + (RandomPointer1 + RandomPointer2 * numPoiners) * expResult;\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer\n  };\n  return result;\n};\n\nconst q2 = () => {\n  const Qnumber = 2;\n  const val1 = '0x' + random_hex_color_code();\n  const val2 = '0x' + random_hex_color_code();\n  const pri = '0x' + random_hex_color_code();\n  const binVal1 = hex2bin(val1);\n  const binVal2 = hex2bin(val2);\n  console.log('random', getRandom2Exponent(100));\n  const binPri = hex2bin(pri);\n  let q = `RAID4/RAID5\n  גודל כל בלוק הוא בית אחד(8 ביטים)\n  נניח שבלוק הנתונים הכיל 0x${val1} ושינו אותו ל-0x${val2}\n  אם בלוק הזוגיות הכיל 0x${pri} מה הוא יכול אחרי השינוי בבלוק?\n  `;\n  let a = 0;\n  let answer = ` hex(${val1}) = bin(${binVal1}) & hex(${val2}) = bin(${binVal2}) & hex(${pri}) = bin(${binPri}) ||||||||||||||||||||||||||||||||||||||||||\n  ${binVal1} xor ${binVal2} = ${a = xor('' + binVal1, '' + binVal2, Math.min(binVal1.length, binVal2.length))} =>\n  ${binPri} xor ${a} = ${a = xor('' + a, '' + binPri, Math.min(a.length, binPri.length))} =>\n  `;\n  let part1 = a.slice(0, 4);\n  let part2 = a.slice(4, a.length);\n  answer += `result = 0x${parseInt(part1, 2)}${parseInt(part2, 2)}`;\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer\n  };\n  return result;\n};\n\nconst q3 = () => {\n  const Qnumber = 3;\n  let expNume = getRandom2Exponent(8);\n  let expResult = getPow(expNume);\n  const val1 = random_decimal_color_code();\n  const binVal1 = hex2bin(val1);\n  let str1 = '' + binVal1;\n  let str2 = '' + binVal1;\n  let str3 = '' + binVal1;\n  let part1 = str1.slice(0, expNume);\n  let part2 = str2.slice(expNume, expNume * 2);\n  let part3 = str3.slice(expNume * 2, str3.length);\n  let q = `בטבלת דפים עם 2 רמות ישנה טבלה עליונה של מצביעים לטבלאות ברמה השנייה\n  גטדל כתובת הוא 32 ביטים\n  הטבלה ברמה העליונה וכן כל האחת מהטבלאות ברמה השנייה מכילות ${expResult} = ${expNume}^2 שורות כל אחת\n  מהו המרחק offcet. בדף אם כתובת הנתון היא 0x${val1}\n  `;\n  let answer = `log_2(${expResult}) = ${expNume}   |   \n  bin(${val1}) = ${binVal1}   |    \n  offcet = ${part3}   |   s = ${part2}   |   m-(s+offcet) = ${part1}   |   \n  offcetToDecimal(${part3}) = ${parseInt(part3, 2)}\n  `;\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer\n  };\n  return result;\n};\n\nconst q4 = () => {\n  const Qnumber = 4;\n  const sizeBlock = 64;\n  let expNume = getRandom2Exponent(4);\n  let expResult = getPow(expNume);\n  const val1 = random_decimal_color_code();\n  const binVal1 = hex2bin(val1);\n  let str1 = '' + binVal1;\n  let str2 = '' + binVal1;\n  let str3 = '' + binVal1;\n  let part1 = str1.slice(0, expNume);\n  let part2 = str2.slice(expNume, expNume * 2);\n  let part3 = str3.slice(expNume * 2, str3.length);\n  let q = `במטמון מיפוי ישיר ישנם ${expResult} = ${expNume}^2  בלוקים\n  כל בלוק בגודל ${sizeBlock} בתים.\n  נניח שהמעבד מבצע פקודה שקוראת נתון מכתובת 0X${val1}`;\n  let answer = `log_2(${expResult}) = ${expNume}   |   \n  bin(${val1}) = ${binVal1}   |    \n  offcet = ${part3}   |   s = ${part2}   |   m-(s+offcet) = ${part1}   |   \n  offcetToDecimal(${part3}) = ${parseInt(part3, 2)}\n  `;\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer\n  };\n  return result;\n};\n\nlet Q = [q1(), q2(), q3(), q4()];\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(MediaCard, {\n        q: Q[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(MediaCard, {\n        q: Q[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(MediaCard, {\n        q: Q[2]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(MediaCard, {\n        q: Q[3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/motidahari/projects/test/client/src/App.js"],"names":["React","MediaCard","getQ","Q","Math","random","length","getRandomPointer","parseInt","getRandom2Exponent","max","getPow","pow","hex2bin","hex","toString","random_hex_color_code","n","slice","random_decimal_color_code","floor","xor","a","b","ans","i","q1","expNume","expResult","Qnumber","RandomPointer1","RandomPointer2","numPoiners","q","answer","result","q2","val1","val2","pri","binVal1","binVal2","console","log","binPri","min","part1","part2","q3","str1","str2","str3","part3","q4","sizeBlock","App","marginTop"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MediaCard from './MediaCard';\n\n\n\n\n\nconst getQ = () => {\n  return Q[(Math.random() * Q.length) | 0];\n}\nconst getRandomPointer = () => {\n  return parseInt(Math.random() * 20);\n}\nconst getRandom2Exponent = (max) => {\n  return parseInt(((Math.random() + 1) * max));\n}\nconst getPow = (pow) => {\n  return Math.pow(2, pow)\n}\nconst hex2bin = (hex) => {\n  return ('00' + (parseInt(hex, 16)).toString(2));\n}\nconst random_hex_color_code = () => {\n  let n = (Math.random() * 0xfffff * 1000000).toString(16);\n  return n.slice(0, 6);\n};\n\nconst random_decimal_color_code = () => {\n  return Math.floor(10000000 + Math.random() * 90000000);\n}\nconst xor = (a, b, n) => {\n  let ans = \"\";\n\n  // Loop to iterate over the\n  // Binary Strings\n  for (let i = 0; i < n; i++) {\n    // If the Character matches\n    if (a[i] == b[i])\n      ans += \"0\";\n    else\n      ans += \"1\";\n  }\n  return ans;\n}\nconst q1 = () => {\n  let expNume = getRandom2Exponent(8);\n  let expResult = getPow(expNume);\n  const Qnumber = 1;\n  const RandomPointer1 = getRandomPointer();\n  const RandomPointer2 = getRandomPointer();\n  const numPoiners = expResult / 4;\n\n\n  let q = `גודל בלוק הוא ${expResult} = ${expNume}^2 ומצביע הוא בגודל 4 בתים.\n  ישנם ${RandomPointer1} מצביעים ישירים ו-${RandomPointer2} מצביעים עקיפים מסוג single indirect\n  מהוא גודל הקובץ המקסימלי במערכת קבצים זו?  \n  `;\n  const answer = `(${RandomPointer1} + ${RandomPointer2} * ${numPoiners}) * ${expResult} = ` + ((RandomPointer1 + (RandomPointer2 * numPoiners)) * expResult);\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer,\n  };\n  return result;\n}\nconst q2 = () => {\n  const Qnumber = 2;\n  const val1 = '0x' + random_hex_color_code();\n  const val2 = '0x' + random_hex_color_code();\n  const pri = '0x' + random_hex_color_code();\n  const binVal1 = hex2bin(val1);\n  const binVal2 = hex2bin(val2);\n  console.log('random', getRandom2Exponent(100));\n  const binPri = hex2bin(pri);\n  let q = `RAID4/RAID5\n  גודל כל בלוק הוא בית אחד(8 ביטים)\n  נניח שבלוק הנתונים הכיל 0x${val1} ושינו אותו ל-0x${val2}\n  אם בלוק הזוגיות הכיל 0x${pri} מה הוא יכול אחרי השינוי בבלוק?\n  `;\n\n  let a = 0;\n  let answer = ` hex(${val1}) = bin(${binVal1}) & hex(${val2}) = bin(${binVal2}) & hex(${pri}) = bin(${binPri}) ||||||||||||||||||||||||||||||||||||||||||\n  ${binVal1} xor ${binVal2} = ${(a = xor('' + binVal1, '' + binVal2, Math.min(binVal1.length, binVal2.length)))} =>\n  ${binPri} xor ${a} = ${(a = xor('' + a, '' + binPri, Math.min(a.length, binPri.length)))} =>\n  `;\n  let part1 = a.slice(0, 4);\n  let part2 = a.slice(4, a.length);\n  answer += `result = 0x${parseInt(part1, 2)}${parseInt(part2, 2)}`;\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer,\n  };\n  return result;\n}\nconst q3 = () => {\n  const Qnumber = 3;\n  let expNume = getRandom2Exponent(8);\n  let expResult = getPow(expNume);\n  const val1 = random_decimal_color_code();\n  const binVal1 = hex2bin(val1);\n\n  let str1 = '' + binVal1;\n  let str2 = '' + binVal1;\n  let str3 = '' + binVal1;\n  let part1 = str1.slice(0, expNume);\n  let part2 = str2.slice(expNume, expNume * 2);\n  let part3 = str3.slice(expNume * 2, str3.length);\n\n  let q = `בטבלת דפים עם 2 רמות ישנה טבלה עליונה של מצביעים לטבלאות ברמה השנייה\n  גטדל כתובת הוא 32 ביטים\n  הטבלה ברמה העליונה וכן כל האחת מהטבלאות ברמה השנייה מכילות ${expResult} = ${expNume}^2 שורות כל אחת\n  מהו המרחק offcet. בדף אם כתובת הנתון היא 0x${val1}\n  `;\n\n\n  let answer = `log_2(${expResult}) = ${expNume}   |   \n  bin(${val1}) = ${binVal1}   |    \n  offcet = ${part3}   |   s = ${part2}   |   m-(s+offcet) = ${part1}   |   \n  offcetToDecimal(${part3}) = ${parseInt(part3, 2)}\n  `;\n\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer,\n  };\n  return result;\n}\n\nconst q4 = () => {\n  const Qnumber = 4;\n  const sizeBlock = 64;\n  let expNume = getRandom2Exponent(4);\n  let expResult = getPow(expNume);\n  const val1 = random_decimal_color_code();\n  const binVal1 = hex2bin(val1);\n\n  let str1 = '' + binVal1;\n  let str2 = '' + binVal1;\n  let str3 = '' + binVal1;\n  let part1 = str1.slice(0, expNume);\n  let part2 = str2.slice(expNume, expNume * 2);\n  let part3 = str3.slice(expNume * 2, str3.length);\n\n  let q = `במטמון מיפוי ישיר ישנם ${expResult} = ${expNume}^2  בלוקים\n  כל בלוק בגודל ${sizeBlock} בתים.\n  נניח שהמעבד מבצע פקודה שקוראת נתון מכתובת 0X${val1}`;\n\n\n  let answer = `log_2(${expResult}) = ${expNume}   |   \n  bin(${val1}) = ${binVal1}   |    \n  offcet = ${part3}   |   s = ${part2}   |   m-(s+offcet) = ${part1}   |   \n  offcetToDecimal(${part3}) = ${parseInt(part3, 2)}\n  `;\n\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer,\n  };\n  return result;\n}\nlet Q = [\n  q1(),\n  q2(),\n  q3(),\n  q4(),\n];\n\nconst App = () => {\n  return (\n    <div>\n\n      <div style={{ marginTop: '20px' }}>\n        <MediaCard q={Q[0]} />\n      </div>\n\n      <div style={{ marginTop: '20px' }}>\n        <MediaCard q={Q[1]} />\n      </div>\n      <div style={{ marginTop: '20px' }}>\n        <MediaCard q={Q[2]} />\n      </div>\n      <div style={{ marginTop: '20px' }}>\n        <MediaCard q={Q[3]} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}