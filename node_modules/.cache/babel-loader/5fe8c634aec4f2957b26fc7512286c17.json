{"ast":null,"code":"var _jsxFileName = \"/Users/motidahari/projects/inventory/client/src/Pages/Products/GapsTable.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { AuthContext } from '../../context/auth';\nimport { Box, Button, MenuItem, TextField, Typography, TableRow, TableCell, Grid, ListSubheader } from '@mui/material';\nimport { PageHeaderContainer } from '../../styles/styledComponents';\nimport { CSVLink } from 'react-csv';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport { useFetchData } from '../../hooks/useFetchData';\nimport products from './../../requests/products';\nimport StyledTable from '../../components/StyledTable';\nimport TableSkeleton from '../../components/TableSkeleton'; // import products from '../../requests/products';\n\nimport { ExportDataContext } from './../../context/DataExport';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: 'Product Name'\n}, {\n  title: 'Total Quantity in location'\n}, {\n  title: 'Supposed Quantity'\n}, {\n  title: 'Gap'\n}];\n\nconst GapsTable = _ref => {\n  _s();\n\n  let {\n    warehouse\n  } = _ref;\n  // const { state: allGaps, error, setState } = useFetchData(products.getGaps);\n  const {\n    user,\n    token\n  } = useContext(AuthContext);\n  const userAction = {\n    userId: user.id,\n    token: token\n  };\n  const [allGaps, setAllGaps] = useState([]);\n\n  const getGapsByLocation = async warehouse => {\n    const location = {\n      locationId: warehouse\n    };\n    const result = await products.getGaps(userAction, location);\n    console.log('result', result);\n    setAllGaps(result);\n  };\n\n  useEffect(() => {\n    if (warehouse.length > 0) {\n      getGapsByLocation(warehouse);\n    }\n  }, [warehouse]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeaderContainer, {\n      sx: {\n        mt: 5,\n        mb: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        sx: {\n          m: 1\n        },\n        variant: \"h4\",\n        children: \"Gaps\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), allGaps ? /*#__PURE__*/_jsxDEV(StyledTable, {\n      columns: columns,\n      children: allGaps.length > 0 ? allGaps.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n        children: [/*#__PURE__*/_jsxDEV(TableCell, {\n          children: row.productName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          children: row.quantityInLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          children: row.quantity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          children: row.gap\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this)]\n      }, row.gapId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(TableRow, {\n        children: /*#__PURE__*/_jsxDEV(TableCell, {\n          children: \"No results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(TableSkeleton, {\n      columns: columns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GapsTable, \"3n5wiPBAHi1zGaIOeLEmttj7KWw=\");\n\n_c = GapsTable;\nexport default GapsTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"GapsTable\");","map":{"version":3,"sources":["/Users/motidahari/projects/inventory/client/src/Pages/Products/GapsTable.jsx"],"names":["React","useState","useContext","useEffect","AuthContext","Box","Button","MenuItem","TextField","Typography","TableRow","TableCell","Grid","ListSubheader","PageHeaderContainer","CSVLink","DownloadIcon","useFetchData","products","StyledTable","TableSkeleton","ExportDataContext","columns","title","GapsTable","warehouse","user","token","userAction","userId","id","allGaps","setAllGaps","getGapsByLocation","location","locationId","result","getGaps","console","log","length","mt","mb","m","map","row","productName","quantityInLocation","quantity","gap","gapId"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { AuthContext } from '../../context/auth';\nimport {\n  Box,\n  Button,\n  MenuItem,\n  TextField,\n  Typography,\n  TableRow,\n  TableCell,\n  Grid,\n  ListSubheader,\n} from '@mui/material';\nimport { PageHeaderContainer } from '../../styles/styledComponents';\nimport { CSVLink } from 'react-csv';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport { useFetchData } from '../../hooks/useFetchData';\nimport products from './../../requests/products';\nimport StyledTable from '../../components/StyledTable';\nimport TableSkeleton from '../../components/TableSkeleton';\n// import products from '../../requests/products';\nimport { ExportDataContext } from './../../context/DataExport';\n\nconst columns = [\n  {\n    title: 'Product Name',\n  },\n  {\n    title: 'Total Quantity in location',\n  },\n  {\n    title: 'Supposed Quantity',\n  },\n  {\n    title: 'Gap',\n  },\n];\n\nconst GapsTable = ({ warehouse }) => {\n  // const { state: allGaps, error, setState } = useFetchData(products.getGaps);\n  const { user, token } = useContext(AuthContext);\n  const userAction = {\n    userId: user.id,\n    token: token,\n  };\n\n  const [allGaps, setAllGaps] = useState([]);\n  const getGapsByLocation = async warehouse => {\n    const location = {\n      locationId: warehouse,\n    };\n    const result = await products.getGaps(userAction, location);\n    console.log('result', result);\n    setAllGaps(result);\n  };\n\n  useEffect(() => {\n    if (warehouse.length > 0) {\n      getGapsByLocation(warehouse);\n    }\n  }, [warehouse]);\n\n  return (\n    <>\n      <PageHeaderContainer sx={{ mt: 5, mb: 3 }}>\n        <Typography sx={{ m: 1 }} variant=\"h4\">\n          Gaps\n        </Typography>\n      </PageHeaderContainer>\n\n      {allGaps ? (\n        <StyledTable columns={columns}>\n          {allGaps.length > 0 ? (\n            allGaps.map(row => (\n              <TableRow key={row.gapId}>\n                <TableCell>{row.productName}</TableCell>\n                <TableCell>{row.quantityInLocation}</TableCell>\n                <TableCell>{row.quantity}</TableCell>\n                <TableCell>{row.gap}</TableCell>\n              </TableRow>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell>No results</TableCell>\n            </TableRow>\n          )}\n        </StyledTable>\n      ) : (\n        <TableSkeleton columns={columns} />\n      )}\n    </>\n  );\n};\n\nexport default GapsTable;\n"]},"metadata":{},"sourceType":"module"}