{"ast":null,"code":"import requests from './requests.js';\nimport { fetchData } from './fetchData.js';\nconst logs = {\n  GetAllLogsProducts: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      }\n    };\n    const result = fetchData(requests.LogsProducts.GetAllLogsProducts, requestOptions);\n    return result;\n  },\n  GetAllLogsProductsParams: async (userAction, params) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      },\n      body: JSON.stringify(params)\n    };\n    const result = fetchData(requests.LogsProducts.GetAllLogsProductByParams, requestOptions);\n    return result;\n  },\n  GetAllLogsMonitoringAmplifiers: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      }\n    };\n    const result = fetchData(requests.LogsProducts.GetAllLogsMonitoringAmplifiers, requestOptions);\n    return result;\n  },\n  GetAllLogsProductsAmplifiersMonitoringByParams: async (userAction, params) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      },\n      body: JSON.stringify(params)\n    };\n    const result = fetchData(requests.LogsProducts.GetAllLogsProductAmplifiersMonitoringByParams, requestOptions);\n    return result;\n  },\n  GetAllLogsAmplifierTraffic: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      }\n    };\n    const result = fetchData(requests.LogsProducts.GetAllLogsAmplifierTraffic, requestOptions);\n    return result;\n  },\n  GetAllLogsProductsAmplifiersTrafficByParams: async (userAction, params) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      },\n      body: JSON.stringify(params)\n    };\n    const result = fetchData(requests.LogsProducts.GetAllLogsProductAmplifiersTrafficByParams, requestOptions);\n    return result;\n  },\n  GetAllLogsProductsByLocationId: async (userAction, location) => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      }\n    };\n    const result = fetchData(`${requests.LogsProducts.GetAllLogsProductsByLocationId}/${location.locationId}`, requestOptions);\n    return result;\n  }\n};\nexport default logs;","map":{"version":3,"sources":["/Users/motidahari/projects/inventory/client/src/requests/logs.js"],"names":["requests","fetchData","logs","GetAllLogsProducts","userAction","requestOptions","method","headers","token","userId","result","LogsProducts","GetAllLogsProductsParams","params","body","JSON","stringify","GetAllLogsProductByParams","GetAllLogsMonitoringAmplifiers","GetAllLogsProductsAmplifiersMonitoringByParams","GetAllLogsProductAmplifiersMonitoringByParams","GetAllLogsAmplifierTraffic","GetAllLogsProductsAmplifiersTrafficByParams","GetAllLogsProductAmplifiersTrafficByParams","GetAllLogsProductsByLocationId","location","locationId"],"mappings":"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","sourcesContent":["import requests from './requests.js';\nimport { fetchData } from './fetchData.js';\n\nconst logs = {\n  GetAllLogsProducts: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n    };\n    const result = fetchData(\n      requests.LogsProducts.GetAllLogsProducts,\n      requestOptions\n    );\n    return result;\n  },\n\n  GetAllLogsProductsParams: async (userAction, params) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n      body: JSON.stringify(params),\n    };\n    const result = fetchData(\n      requests.LogsProducts.GetAllLogsProductByParams,\n      requestOptions\n    );\n    return result;\n  },\n\n  GetAllLogsMonitoringAmplifiers: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n    };\n    const result = fetchData(\n      requests.LogsProducts.GetAllLogsMonitoringAmplifiers,\n      requestOptions\n    );\n    return result;\n  },\n\n  GetAllLogsProductsAmplifiersMonitoringByParams: async (\n    userAction,\n    params\n  ) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n      body: JSON.stringify(params),\n    };\n    const result = fetchData(\n      requests.LogsProducts.GetAllLogsProductAmplifiersMonitoringByParams,\n      requestOptions\n    );\n    return result;\n  },\n\n  GetAllLogsAmplifierTraffic: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n    };\n    const result = fetchData(\n      requests.LogsProducts.GetAllLogsAmplifierTraffic,\n      requestOptions\n    );\n    return result;\n  },\n\n  GetAllLogsProductsAmplifiersTrafficByParams: async (userAction, params) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n      body: JSON.stringify(params),\n    };\n    const result = fetchData(\n      requests.LogsProducts.GetAllLogsProductAmplifiersTrafficByParams,\n      requestOptions\n    );\n    return result;\n  },\n\n  GetAllLogsProductsByLocationId: async (userAction, location) => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n    };\n    const result = fetchData(\n      `${requests.LogsProducts.GetAllLogsProductsByLocationId}/${location.locationId}`,\n      requestOptions\n    );\n    return result;\n  },\n};\n\nexport default logs;\n"]},"metadata":{},"sourceType":"module"}