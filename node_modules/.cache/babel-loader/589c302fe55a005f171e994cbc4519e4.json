{"ast":null,"code":"var _jsxFileName = \"/Users/motidahari/projects/inventory/client/src/Pages/Products/MoveProductModal.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { Modal, Grid, TextField, MenuItem } from '@mui/material';\nimport ModalHeader from '../../components/ModalHeader';\nimport TextFieldSelect from '../../components/TextFieldSelect';\nimport products from '../../requests/products';\nimport { useForm } from '../../hooks/useForm';\nimport { AuthContext } from '../../context/auth';\nimport { toast } from 'react-toastify';\nimport Notification from '../../components/Notification';\nimport StyledModal from '../../components/StyledModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MoveProductModal = _ref => {\n  _s();\n\n  let {\n    open,\n    close,\n    allLocations,\n    product,\n    fetchData\n  } = _ref;\n  const [warehouse, setWarehouse] = useState('Select location');\n  const {\n    user,\n    token\n  } = useContext(AuthContext);\n  const userAction = {\n    userId: user.id,\n    token: token\n  };\n  const {\n    onChange,\n    onSubmit,\n    setFieldValue,\n    setValues,\n    values\n  } = useForm(moveProductCallback, {\n    productId: (product === null || product === void 0 ? void 0 : product.productId) || '',\n    locationId: (product === null || product === void 0 ? void 0 : product.locationId) || '',\n    locationName: (product === null || product === void 0 ? void 0 : product.locationName) || '',\n    description: '',\n    status: ''\n  });\n  useEffect(() => {\n    setWarehouse(product === null || product === void 0 ? void 0 : product.locationId);\n    setValues(product);\n  }, [product]);\n\n  const moveProduct = async () => {\n    // console.log('values', values);\n    const resultMoveProduct = await products.UpdateProductLocation(userAction, values); // console.log('resultMoveProduct', resultMoveProduct);\n\n    if (resultMoveProduct !== null && resultMoveProduct !== void 0 && resultMoveProduct.errors) {\n      toast.error( /*#__PURE__*/_jsxDEV(Notification, {\n        text: 'error'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 19\n      }, this));\n    } else {\n      toast.success( /*#__PURE__*/_jsxDEV(Notification, {\n        text: 'Product moved'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this));\n      fetchData();\n      close();\n    }\n  };\n\n  function moveProductCallback() {\n    moveProduct();\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    open: open,\n    onClose: close,\n    children: /*#__PURE__*/_jsxDEV(StyledModal, {\n      submitText: 'Move Product',\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        title: \"Move Product\",\n        close: close\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [allLocations ? /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextFieldSelect, {\n            value: warehouse,\n            onChange: event => {\n              setFieldValue('locationId', event.target.value);\n              setWarehouse(event.target.value);\n            },\n            label: \"Select location\",\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              disabled: true,\n              value: 'Select location',\n              children: \"Select location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this), allLocations.map(location => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: location.locationId,\n              name: location.locationName,\n              children: location.locationName\n            }, location.locationId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Comment\",\n            onChange: onChange,\n            value: values.description,\n            variant: \"outlined\",\n            multiline: true,\n            rows: 4,\n            name: \"description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MoveProductModal, \"tHUJIGIH/CWw/8Lr+mCvg99H5r8=\", false, function () {\n  return [useForm];\n});\n\n_c = MoveProductModal;\nexport default MoveProductModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoveProductModal\");","map":{"version":3,"sources":["/Users/motidahari/projects/inventory/client/src/Pages/Products/MoveProductModal.jsx"],"names":["React","useState","useContext","useEffect","Modal","Grid","TextField","MenuItem","ModalHeader","TextFieldSelect","products","useForm","AuthContext","toast","Notification","StyledModal","MoveProductModal","open","close","allLocations","product","fetchData","warehouse","setWarehouse","user","token","userAction","userId","id","onChange","onSubmit","setFieldValue","setValues","values","moveProductCallback","productId","locationId","locationName","description","status","moveProduct","resultMoveProduct","UpdateProductLocation","errors","error","success","event","target","value","map","location"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { Modal, Grid, TextField, MenuItem } from '@mui/material';\nimport ModalHeader from '../../components/ModalHeader';\nimport TextFieldSelect from '../../components/TextFieldSelect';\nimport products from '../../requests/products';\nimport { useForm } from '../../hooks/useForm';\nimport { AuthContext } from '../../context/auth';\nimport { toast } from 'react-toastify';\nimport Notification from '../../components/Notification';\nimport StyledModal from '../../components/StyledModal';\n\nconst MoveProductModal = ({\n  open,\n  close,\n  allLocations,\n  product,\n  fetchData,\n}) => {\n  const [warehouse, setWarehouse] = useState('Select location');\n  const { user, token } = useContext(AuthContext);\n  const userAction = {\n    userId: user.id,\n    token: token,\n  };\n  const { onChange, onSubmit, setFieldValue, setValues, values } = useForm(\n    moveProductCallback,\n    {\n      productId: product?.productId || '',\n      locationId: product?.locationId || '',\n      locationName: product?.locationName || '',\n      description: '',\n      status: '',\n    }\n  );\n\n  useEffect(() => {\n    setWarehouse(product?.locationId);\n    setValues(product);\n  }, [product]);\n\n  const moveProduct = async () => {\n    // console.log('values', values);\n    const resultMoveProduct = await products.UpdateProductLocation(\n      userAction,\n      values\n    );\n    // console.log('resultMoveProduct', resultMoveProduct);\n    if (resultMoveProduct?.errors) {\n      toast.error(<Notification text={'error'} />);\n    } else {\n      toast.success(<Notification text={'Product moved'} />);\n      fetchData();\n      close();\n    }\n  };\n\n  function moveProductCallback() {\n    moveProduct();\n  }\n\n  return (\n    <Modal open={open} onClose={close}>\n      <StyledModal submitText={'Move Product'} onSubmit={onSubmit}>\n        <ModalHeader title=\"Move Product\" close={close} />\n\n        <Grid container spacing={3}>\n          {allLocations ? (\n            <Grid item xs={12}>\n              <TextFieldSelect\n                value={warehouse}\n                onChange={event => {\n                  setFieldValue('locationId', event.target.value);\n                  setWarehouse(event.target.value);\n                }}\n                label=\"Select location\"\n              >\n                <MenuItem disabled value={'Select location'}>\n                  Select location\n                </MenuItem>\n                {allLocations.map(location => (\n                  <MenuItem\n                    key={location.locationId}\n                    value={location.locationId}\n                    name={location.locationName}\n                  >\n                    {location.locationName}\n                  </MenuItem>\n                ))}\n              </TextFieldSelect>\n            </Grid>\n          ) : null}\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              label=\"Comment\"\n              onChange={onChange}\n              value={values.description}\n              variant=\"outlined\"\n              multiline\n              rows={4}\n              name=\"description\"\n            />\n          </Grid>\n        </Grid>\n      </StyledModal>\n    </Modal>\n  );\n};\n\nexport default MoveProductModal;\n"]},"metadata":{},"sourceType":"module"}