{"ast":null,"code":"var _jsxFileName = \"/Users/motidahari/projects/test/client/src/App.js\";\nimport React from 'react';\nimport MediaCard from './MediaCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getRandomPointer = () => {\n  return parseInt(Math.random() * 20);\n};\n\nconst getRandomNum = max => {\n  return parseInt(Math.random() * max);\n};\n\nconst getPow = pow => {\n  return Math.pow(2, pow);\n};\n\nconst hex2bin = hex => {\n  return '00' + parseInt(hex, 16).toString(2);\n};\n\nconst random_hex = () => {\n  let n = (Math.random() * 0xfffff * 1000000).toString(16);\n  return n.slice(0, 6);\n};\n\nconst random_decimal = () => {\n  return Math.floor(10000000 + Math.random() * 90000000);\n};\n\nconst xor = (a, b, n) => {\n  let ans = \"\";\n\n  for (let i = 0; i < n; i++) {\n    if (a[i] == b[i]) ans += \"0\";else ans += \"1\";\n  }\n\n  return ans;\n};\n\nconst getRandomStr = size => {\n  const values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  let str = '';\n\n  for (let index = 0; index < size; index++) {\n    str += values[getRandomNum(values.length)];\n  }\n\n  return str;\n};\n\nconst q1 = () => {\n  let expNume = getRandomNum(14);\n  let expResult = getPow(expNume);\n  const Qnumber = 1;\n  const RandomPointer1 = getRandomPointer();\n  const RandomPointer2 = getRandomPointer();\n  const numPoiners = expResult / 4;\n  let q = `גודל בלוק הוא ${expResult} = ${expNume}^2 ומצביע הוא בגודל 4 בתים.\n  ישנם ${RandomPointer1} מצביעים ישירים ו-${RandomPointer2} מצביעים עקיפים מסוג single indirect\n  מהוא גודל הקובץ המקסימלי במערכת קבצים זו?  \n  `;\n  const answer = `(${RandomPointer1} + ${RandomPointer2} * ${numPoiners}) * ${expResult} = ` + (RandomPointer1 + RandomPointer2 * numPoiners) * expResult;\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer\n  };\n  return result;\n};\n\nconst q2 = () => {\n  const Qnumber = 2;\n  const val1 = random_hex();\n  const val2 = random_hex();\n  const pri = random_hex();\n  const binVal1 = hex2bin(val1);\n  const binVal2 = hex2bin(val2);\n  const binPri = hex2bin(pri);\n  let q = `RAID4/RAID5\n  גודל כל בלוק הוא בית אחד(8 ביטים)\n  נניח שבלוק הנתונים הכיל 0x${val1} ושינו אותו ל-0x${val2}\n  אם בלוק הזוגיות הכיל 0x${pri} מה הוא יכול אחרי השינוי בבלוק?\n  `;\n  let a = 0;\n  let answer = ` hex(${val1}) = bin(${binVal1})    |    hex(${val2}) = bin(${binVal2})    |    hex(${pri}) = bin(${binPri})   |   \n  ${binVal1} xor ${binVal2} = ${a = xor('' + binVal1, '' + binVal2, Math.min(binVal1.length, binVal2.length))}    |   \n  ${binPri} xor ${a} = ${a = xor('' + a, '' + binPri, Math.min(a.length, binPri.length))}   |   \n  `;\n  let part1 = a.slice(0, 4);\n  let part2 = a.slice(4, a.length);\n  answer += `result = 0x${parseInt(part1, 2)}${parseInt(part2, 2)}`;\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer\n  };\n  return result;\n};\n\nconst q3 = () => {\n  const Qnumber = 3;\n  let expNume = getRandomNum(14);\n  let expResult = getPow(expNume);\n  const val1 = random_decimal();\n  const binVal1 = hex2bin(val1);\n  let str1 = '' + binVal1;\n  let str2 = '' + binVal1;\n  let str3 = '' + binVal1;\n  let part1 = str1.slice(0, expNume);\n  let part2 = str2.slice(expNume, expNume * 2);\n  let part3 = str3.slice(expNume * 2, str3.length);\n  let q = `בטבלת דפים עם 2 רמות ישנה טבלה עליונה של מצביעים לטבלאות ברמה השנייה\n  גטדל כתובת הוא 32 ביטים\n  הטבלה ברמה העליונה וכן כל האחת מהטבלאות ברמה השנייה מכילות ${expResult} = ${expNume}^2 שורות כל אחת\n  מהו המרחק offset. בדף אם כתובת הנתון היא 0x${val1}\n  `;\n  let answer = `log_2(${expResult}) = ${expNume}   |   \n  bin(${val1}) = ${binVal1}   |    \n  offset = ${part3}   |   s = ${part2}   |   m-(s+offset) = ${part1}   |   \n  offsetToDecimal(${part3}) = ${parseInt(part3, 2)}\n  `;\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer\n  };\n  return result;\n};\n\nconst q4 = () => {\n  const Qnumber = 4;\n  const sizeBlock = 64;\n  const logSizeBlock = 6;\n  let expNume = getRandomNum(14);\n  let expResult = getPow(expNume);\n  const val1 = random_decimal();\n  const binVal1 = hex2bin(val1);\n  let str1 = '' + binVal1;\n  let str2 = '' + binVal1;\n  let str3 = '' + binVal1;\n  const part1 = str1.slice(str1.length - logSizeBlock, str1.length);\n  const part2 = str1.slice(str1.length - logSizeBlock - expNume, str1.length - logSizeBlock);\n  const part3 = str1.slice(str1.length - logSizeBlock, str1.length);\n  let q = `במטמון מיפוי ישיר ישנם ${expResult} = ${expNume}^2  בלוקים\n  כל בלוק בגודל ${sizeBlock} = ${logSizeBlock}^2  בתים.\n  נניח שהמעבד מבצע פקודה שקוראת נתון מכתובת 0X${val1}\n  מהו מספר הבלוק שבו החומרה (MMU) תחפש את הנתון?`;\n  let answer = `log_2(${expResult}) = ${expNume}   |   \n  bin(${val1}) = ${binVal1}   |    \n  offset = ${part1}    |    \n  numBlockInBin = ${part2}   |   \n  numBlockInNumber = ${parseInt(part2, 2)}\n   `;\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer\n  };\n  return result;\n};\n\nconst q5 = () => {\n  const Qnumber = 5;\n  let sizeBlock = 0;\n\n  while (sizeBlock < 10) {\n    sizeBlock = getRandomNum(20);\n  }\n\n  let buf1 = getRandomStr(sizeBlock);\n  let buf2 = getRandomStr(getRandomNum(10));\n\n  while (buf2.length < 2) {\n    buf2 = getRandomStr(getRandomNum(10));\n  }\n\n  console.log('buf1', buf1);\n  console.log('buf2', buf2);\n  let str1 = '' + binVal1;\n  let str2 = '' + binVal1;\n  let str3 = '' + binVal1;\n  const part1 = str1.slice(str1.length - logSizeBlock, str1.length);\n  const part2 = str1.slice(str1.length - logSizeBlock - expNume, str1.length - logSizeBlock);\n  const part3 = str1.slice(str1.length - logSizeBlock, str1.length);\n  let q = `במטמון מיפוי ישיר ישנם ${expResult} = ${expNume}^2  בלוקים\n  כל בלוק בגודל ${sizeBlock} = ${logSizeBlock}^2  בתים.\n  נניח שהמעבד מבצע פקודה שקוראת נתון מכתובת 0X${val1}\n  מהו מספר הבלוק שבו החומרה (MMU) תחפש את הנתון?`;\n  let answer = `log_2(${expResult}) = ${expNume}   |   \n  bin(${val1}) = ${binVal1}   |    \n  offset = ${part1}    |    \n  numBlockInBin = ${part2}   |   \n  numBlockInNumber = ${parseInt(part2, 2)}\n   `;\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer\n  };\n  return result;\n};\n\nlet Q = [q1(), q2(), q3(), q4()];\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Q.length > 0 && Q.map(q => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(MediaCard, {\n          q: q\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n};\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/motidahari/projects/test/client/src/App.js"],"names":["React","MediaCard","getRandomPointer","parseInt","Math","random","getRandomNum","max","getPow","pow","hex2bin","hex","toString","random_hex","n","slice","random_decimal","floor","xor","a","b","ans","i","getRandomStr","size","values","str","index","length","q1","expNume","expResult","Qnumber","RandomPointer1","RandomPointer2","numPoiners","q","answer","result","q2","val1","val2","pri","binVal1","binVal2","binPri","min","part1","part2","q3","str1","str2","str3","part3","q4","sizeBlock","logSizeBlock","q5","buf1","buf2","console","log","Q","App","map","marginTop"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MediaCard from './MediaCard';\n\nconst getRandomPointer = () => {\n  return parseInt(Math.random() * 20);\n}\nconst getRandomNum = (max) => {\n  return parseInt(Math.random() * max);\n}\nconst getPow = (pow) => {\n  return Math.pow(2, pow)\n}\nconst hex2bin = (hex) => {\n  return ('00' + (parseInt(hex, 16)).toString(2));\n}\nconst random_hex = () => {\n  let n = (Math.random() * 0xfffff * 1000000).toString(16);\n  return n.slice(0, 6);\n};\nconst random_decimal = () => {\n  return Math.floor(10000000 + Math.random() * 90000000);\n}\nconst xor = (a, b, n) => {\n  let ans = \"\";\n  for (let i = 0; i < n; i++) {\n    if (a[i] == b[i])\n      ans += \"0\";\n    else\n      ans += \"1\";\n  }\n  return ans;\n}\nconst getRandomStr = (size) => {\n  const values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n\n  let str = '';\n  for (let index = 0; index < size; index++) {\n    str += values[getRandomNum(values.length)]\n  }\n  return str;\n}\n\nconst q1 = () => {\n  let expNume = getRandomNum(14);\n  let expResult = getPow(expNume);\n  const Qnumber = 1;\n  const RandomPointer1 = getRandomPointer();\n  const RandomPointer2 = getRandomPointer();\n  const numPoiners = expResult / 4;\n  let q = `גודל בלוק הוא ${expResult} = ${expNume}^2 ומצביע הוא בגודל 4 בתים.\n  ישנם ${RandomPointer1} מצביעים ישירים ו-${RandomPointer2} מצביעים עקיפים מסוג single indirect\n  מהוא גודל הקובץ המקסימלי במערכת קבצים זו?  \n  `;\n  const answer = `(${RandomPointer1} + ${RandomPointer2} * ${numPoiners}) * ${expResult} = ` + ((RandomPointer1 + (RandomPointer2 * numPoiners)) * expResult);\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer,\n  };\n  return result;\n}\nconst q2 = () => {\n  const Qnumber = 2;\n  const val1 = random_hex();\n  const val2 = random_hex();\n  const pri = random_hex();\n  const binVal1 = hex2bin(val1);\n  const binVal2 = hex2bin(val2);\n  const binPri = hex2bin(pri);\n  let q = `RAID4/RAID5\n  גודל כל בלוק הוא בית אחד(8 ביטים)\n  נניח שבלוק הנתונים הכיל 0x${val1} ושינו אותו ל-0x${val2}\n  אם בלוק הזוגיות הכיל 0x${pri} מה הוא יכול אחרי השינוי בבלוק?\n  `;\n\n  let a = 0;\n  let answer = ` hex(${val1}) = bin(${binVal1})    |    hex(${val2}) = bin(${binVal2})    |    hex(${pri}) = bin(${binPri})   |   \n  ${binVal1} xor ${binVal2} = ${(a = xor('' + binVal1, '' + binVal2, Math.min(binVal1.length, binVal2.length)))}    |   \n  ${binPri} xor ${a} = ${(a = xor('' + a, '' + binPri, Math.min(a.length, binPri.length)))}   |   \n  `;\n  let part1 = a.slice(0, 4);\n  let part2 = a.slice(4, a.length);\n  answer += `result = 0x${parseInt(part1, 2)}${parseInt(part2, 2)}`;\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer,\n  };\n  return result;\n}\nconst q3 = () => {\n  const Qnumber = 3;\n  let expNume = getRandomNum(14);\n  let expResult = getPow(expNume);\n  const val1 = random_decimal();\n  const binVal1 = hex2bin(val1);\n\n  let str1 = '' + binVal1;\n  let str2 = '' + binVal1;\n  let str3 = '' + binVal1;\n  let part1 = str1.slice(0, expNume);\n  let part2 = str2.slice(expNume, expNume * 2);\n  let part3 = str3.slice(expNume * 2, str3.length);\n\n  let q = `בטבלת דפים עם 2 רמות ישנה טבלה עליונה של מצביעים לטבלאות ברמה השנייה\n  גטדל כתובת הוא 32 ביטים\n  הטבלה ברמה העליונה וכן כל האחת מהטבלאות ברמה השנייה מכילות ${expResult} = ${expNume}^2 שורות כל אחת\n  מהו המרחק offset. בדף אם כתובת הנתון היא 0x${val1}\n  `;\n\n\n  let answer = `log_2(${expResult}) = ${expNume}   |   \n  bin(${val1}) = ${binVal1}   |    \n  offset = ${part3}   |   s = ${part2}   |   m-(s+offset) = ${part1}   |   \n  offsetToDecimal(${part3}) = ${parseInt(part3, 2)}\n  `;\n\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer,\n  };\n  return result;\n}\nconst q4 = () => {\n  const Qnumber = 4;\n  const sizeBlock = 64;\n  const logSizeBlock = 6;\n  let expNume = getRandomNum(14);\n  let expResult = getPow(expNume);\n  const val1 = random_decimal();\n  const binVal1 = hex2bin(val1);\n\n  let str1 = '' + binVal1;\n  let str2 = '' + binVal1;\n  let str3 = '' + binVal1;\n  const part1 = str1.slice(str1.length - logSizeBlock, str1.length);\n  const part2 = str1.slice(str1.length - logSizeBlock - expNume, str1.length - logSizeBlock);\n  const part3 = str1.slice(str1.length - logSizeBlock, str1.length);\n\n  let q = `במטמון מיפוי ישיר ישנם ${expResult} = ${expNume}^2  בלוקים\n  כל בלוק בגודל ${sizeBlock} = ${logSizeBlock}^2  בתים.\n  נניח שהמעבד מבצע פקודה שקוראת נתון מכתובת 0X${val1}\n  מהו מספר הבלוק שבו החומרה (MMU) תחפש את הנתון?`;\n\n\n  let answer = `log_2(${expResult}) = ${expNume}   |   \n  bin(${val1}) = ${binVal1}   |    \n  offset = ${part1}    |    \n  numBlockInBin = ${part2}   |   \n  numBlockInNumber = ${parseInt(part2, 2)}\n   `;\n\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer,\n  };\n  return result;\n}\nconst q5 = () => {\n  const Qnumber = 5;\n  let sizeBlock = 0;\n  while (sizeBlock < 10) {\n    sizeBlock = getRandomNum(20);\n  }\n  let buf1 = getRandomStr(sizeBlock);\n  let buf2 = getRandomStr(getRandomNum(10));\n  while (buf2.length < 2) {\n    buf2 = getRandomStr(getRandomNum(10));\n  }\n  console.log('buf1', buf1);\n  console.log('buf2', buf2);\n\n  let str1 = '' + binVal1;\n  let str2 = '' + binVal1;\n  let str3 = '' + binVal1;\n  const part1 = str1.slice(str1.length - logSizeBlock, str1.length);\n  const part2 = str1.slice(str1.length - logSizeBlock - expNume, str1.length - logSizeBlock);\n  const part3 = str1.slice(str1.length - logSizeBlock, str1.length);\n\n  let q = `במטמון מיפוי ישיר ישנם ${expResult} = ${expNume}^2  בלוקים\n  כל בלוק בגודל ${sizeBlock} = ${logSizeBlock}^2  בתים.\n  נניח שהמעבד מבצע פקודה שקוראת נתון מכתובת 0X${val1}\n  מהו מספר הבלוק שבו החומרה (MMU) תחפש את הנתון?`;\n\n\n  let answer = `log_2(${expResult}) = ${expNume}   |   \n  bin(${val1}) = ${binVal1}   |    \n  offset = ${part1}    |    \n  numBlockInBin = ${part2}   |   \n  numBlockInNumber = ${parseInt(part2, 2)}\n   `;\n\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer,\n  };\n  return result;\n}\n\n\n\n\nlet Q = [\n  q1(),\n  q2(),\n  q3(),\n  q4(),\n];\n\nconst App = () => {\n  return (\n    <div>\n      {Q.length > 0 && Q.map((q) => {\n        return (<div style={{ marginTop: '20px' }}>\n          <MediaCard q={q} />\n        </div>)\n      })}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}