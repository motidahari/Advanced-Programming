{"ast":null,"code":"import requests from './requests.js';\nimport axios from 'axios';\nconst employees = {\n  addEmployee: async (userAction, employee) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      },\n      body: JSON.stringify(employee)\n    };\n    const result = await fetch(requests.Employees.AddEmployee, requestOptions).then(async response => {\n      var _response$headers$get;\n\n      const isJson = (_response$headers$get = response.headers.get('content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  deleteEmployeeById: async (userAction, employee) => {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      },\n      body: JSON.stringify(employee)\n    };\n    const result = await fetch(requests.Employees.DeleteEmployee, requestOptions).then(async response => {\n      var _response$headers$get2;\n\n      const isJson = (_response$headers$get2 = response.headers.get('content-type')) === null || _response$headers$get2 === void 0 ? void 0 : _response$headers$get2.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  getAllEmployees: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      }\n    };\n    const result = await fetch(requests.Employees.GetEmployees, requestOptions).then(async response => {\n      var _response$headers$get3;\n\n      const isJson = (_response$headers$get3 = response.headers.get('content-type')) === null || _response$headers$get3 === void 0 ? void 0 : _response$headers$get3.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  updateEmployee: async (userAction, employee) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      },\n      body: JSON.stringify(employee)\n    };\n    const result = await fetch(requests.Employees.UpdateEmployee, requestOptions).then(async response => {\n      var _response$headers$get4;\n\n      const isJson = (_response$headers$get4 = response.headers.get('content-type')) === null || _response$headers$get4 === void 0 ? void 0 : _response$headers$get4.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  getEmployeesByParams: async (userAction, employee) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      },\n      body: JSON.stringify(employee)\n    };\n    const result = await fetch(requests.Employees.GetEmployeesByParams, requestOptions).then(async response => {\n      var _response$headers$get5;\n\n      const isJson = (_response$headers$get5 = response.headers.get('content-type')) === null || _response$headers$get5 === void 0 ? void 0 : _response$headers$get5.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  }\n};\nexport default employees;","map":{"version":3,"sources":["/Users/motidahari/projects/inventoryProject/client/src/requests/employees.js"],"names":["requests","axios","employees","addEmployee","userAction","employee","requestOptions","method","headers","token","userId","body","JSON","stringify","result","fetch","Employees","AddEmployee","then","response","isJson","get","includes","data","json","ok","error","errors","status","Promise","reject","catch","deleteEmployeeById","DeleteEmployee","getAllEmployees","GetEmployees","updateEmployee","UpdateEmployee","getEmployeesByParams","GetEmployeesByParams"],"mappings":"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","sourcesContent":["import requests from './requests.js';\nimport axios from 'axios';\n\nconst employees = {\n  addEmployee: async (userAction, employee) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n      body: JSON.stringify(employee),\n    };\n    const result = await fetch(requests.Employees.AddEmployee, requestOptions)\n      .then(async response => {\n        const isJson = response.headers\n          .get('content-type')\n          ?.includes('application/json');\n        const data = isJson && (await response.json());\n\n        // check for error response\n        if (!response.ok) {\n          // get error message from body or default to response status\n          const error = (data && data.errors) || response.status;\n          return Promise.reject(error);\n        }\n        return data;\n        // console.log(\"data\", data)\n      })\n      .catch(errors => {\n        // console.error(errors);\n        return { errors };\n      });\n    return result;\n  },\n  deleteEmployeeById: async (userAction, employee) => {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n      body: JSON.stringify(employee),\n    };\n    const result = await fetch(\n      requests.Employees.DeleteEmployee,\n      requestOptions\n    )\n      .then(async response => {\n        const isJson = response.headers\n          .get('content-type')\n          ?.includes('application/json');\n        const data = isJson && (await response.json());\n\n        // check for error response\n        if (!response.ok) {\n          // get error message from body or default to response status\n          const error = (data && data.errors) || response.status;\n          return Promise.reject(error);\n        }\n        return data;\n        // console.log(\"data\", data)\n      })\n      .catch(errors => {\n        // console.error(errors);\n        return { errors };\n      });\n    return result;\n  },\n  getAllEmployees: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n    };\n    const result = await fetch(requests.Employees.GetEmployees, requestOptions)\n      .then(async response => {\n        const isJson = response.headers\n          .get('content-type')\n          ?.includes('application/json');\n        const data = isJson && (await response.json());\n\n        // check for error response\n        if (!response.ok) {\n          // get error message from body or default to response status\n          const error = (data && data.errors) || response.status;\n          return Promise.reject(error);\n        }\n        return data;\n        // console.log(\"data\", data)\n      })\n      .catch(errors => {\n        // console.error(errors);\n        return { errors };\n      });\n    return result;\n  },\n  updateEmployee: async (userAction, employee) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n      body: JSON.stringify(employee),\n    };\n    const result = await fetch(\n      requests.Employees.UpdateEmployee,\n      requestOptions\n    )\n      .then(async response => {\n        const isJson = response.headers\n          .get('content-type')\n          ?.includes('application/json');\n        const data = isJson && (await response.json());\n\n        // check for error response\n        if (!response.ok) {\n          // get error message from body or default to response status\n          const error = (data && data.errors) || response.status;\n          return Promise.reject(error);\n        }\n        return data;\n        // console.log(\"data\", data)\n      })\n      .catch(errors => {\n        // console.error(errors);\n        return { errors };\n      });\n    return result;\n  },\n  getEmployeesByParams: async (userAction, employee) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n      body: JSON.stringify(employee),\n    };\n    const result = await fetch(\n      requests.Employees.GetEmployeesByParams,\n      requestOptions\n    )\n      .then(async response => {\n        const isJson = response.headers\n          .get('content-type')\n          ?.includes('application/json');\n        const data = isJson && (await response.json());\n\n        // check for error response\n        if (!response.ok) {\n          // get error message from body or default to response status\n          const error = (data && data.errors) || response.status;\n          return Promise.reject(error);\n        }\n        return data;\n        // console.log(\"data\", data)\n      })\n      .catch(errors => {\n        // console.error(errors);\n        return { errors };\n      });\n    return result;\n  },\n};\n\nexport default employees;\n"]},"metadata":{},"sourceType":"module"}