{"ast":null,"code":"var _jsxFileName = \"/Users/motidahari/projects/inventory/client/src/Pages/Logs/LogsTable.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport { Typography } from '@mui/material';\nimport moment from 'moment';\nimport StyledDataGrid from '../../components/StyledDataGrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LogsTable = _ref => {\n  _s();\n\n  let {\n    allLogs,\n    error\n  } = _ref;\n  const columns = useMemo(() => [{\n    field: 'action',\n    headerName: 'Action',\n    sortable: false,\n    flex: 0.4,\n    minWidth: 100,\n    renderCell: row => /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"neutral.900\",\n      children: row.row.action\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }, this)\n  }, {\n    field: 'productName',\n    headerName: 'Product Name',\n    sortable: false,\n    flex: 0.4,\n    minWidth: 100,\n    renderCell: row => /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"neutral.900\",\n      children: row.row.productName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }, this)\n  }, {\n    field: 'locationName',\n    headerName: 'Location Name',\n    sortable: false,\n    flex: 0.4,\n    minWidth: 100,\n    renderCell: row => /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"neutral.900\",\n      children: row.row.locationName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this)\n  }, {\n    field: 'PONumber',\n    headerName: 'PO Number',\n    sortable: false,\n    flex: 0.4,\n    minWidth: 100,\n    renderCell: row => /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"neutral.900\",\n      children: row.row.PONumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }, this)\n  }, {\n    field: 'description',\n    headerName: 'Description',\n    sortable: false,\n    flex: 0.4,\n    minWidth: 100,\n    renderCell: row => /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"neutral.900\",\n      children: row.row.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this)\n  }, {\n    field: 'serialNumber',\n    headerName: 'Serial Number',\n    sortable: false,\n    flex: 0.4,\n    minWidth: 100,\n    renderCell: row => /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"neutral.900\",\n      children: row.row.serialNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this)\n  }, {\n    field: 'date',\n    headerName: 'Date',\n    sortable: false,\n    flex: 0.4,\n    minWidth: 100,\n    renderCell: row => /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"neutral.900\",\n      children: moment(row.row.date).format('YYYY-MM-DD')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }, this)\n  }], []);\n  if (error) return /*#__PURE__*/_jsxDEV(Typography, {\n    variant: \"h4\",\n    children: \"error featching logs table\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(StyledDataGrid, {\n    rows: allLogs,\n    columns: columns,\n    getRowId: row => row.logId\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LogsTable, \"erkfbBpUuAY09jdvhSOqc0XsEHQ=\");\n\n_c = LogsTable;\nexport default LogsTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogsTable\");","map":{"version":3,"sources":["/Users/motidahari/projects/inventory/client/src/Pages/Logs/LogsTable.jsx"],"names":["React","useMemo","Typography","moment","StyledDataGrid","LogsTable","allLogs","error","columns","field","headerName","sortable","flex","minWidth","renderCell","row","action","productName","locationName","PONumber","description","serialNumber","date","format","logId"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { Typography } from '@mui/material';\nimport moment from 'moment';\nimport StyledDataGrid from '../../components/StyledDataGrid';\n\nconst LogsTable = ({ allLogs, error }) => {\n  const columns = useMemo(\n    () => [\n      {\n        field: 'action',\n        headerName: 'Action',\n        sortable: false,\n        flex: 0.4,\n        minWidth: 100,\n        renderCell: row => (\n          <Typography color=\"neutral.900\">{row.row.action}</Typography>\n        ),\n      },\n      {\n        field: 'productName',\n        headerName: 'Product Name',\n        sortable: false,\n        flex: 0.4,\n        minWidth: 100,\n        renderCell: row => (\n          <Typography color=\"neutral.900\">{row.row.productName}</Typography>\n        ),\n      },\n      {\n        field: 'locationName',\n        headerName: 'Location Name',\n        sortable: false,\n        flex: 0.4,\n        minWidth: 100,\n        renderCell: row => (\n          <Typography color=\"neutral.900\">{row.row.locationName}</Typography>\n        ),\n      },\n      {\n        field: 'PONumber',\n        headerName: 'PO Number',\n        sortable: false,\n        flex: 0.4,\n        minWidth: 100,\n        renderCell: row => (\n          <Typography color=\"neutral.900\">{row.row.PONumber}</Typography>\n        ),\n      },\n      {\n        field: 'description',\n        headerName: 'Description',\n        sortable: false,\n        flex: 0.4,\n        minWidth: 100,\n        renderCell: row => (\n          <Typography color=\"neutral.900\">{row.row.description}</Typography>\n        ),\n      },\n      {\n        field: 'serialNumber',\n        headerName: 'Serial Number',\n        sortable: false,\n        flex: 0.4,\n        minWidth: 100,\n        renderCell: row => (\n          <Typography color=\"neutral.900\">{row.row.serialNumber}</Typography>\n        ),\n      },\n      {\n        field: 'date',\n        headerName: 'Date',\n        sortable: false,\n        flex: 0.4,\n        minWidth: 100,\n        renderCell: row => (\n          <Typography color=\"neutral.900\">\n            {moment(row.row.date).format('YYYY-MM-DD')}\n          </Typography>\n        ),\n      },\n    ],\n    []\n  );\n\n  if (error)\n    return <Typography variant=\"h4\">error featching logs table</Typography>;\n\n  return (\n    <StyledDataGrid\n      rows={allLogs}\n      columns={columns}\n      getRowId={row => row.logId}\n    />\n  );\n};\n\nexport default LogsTable;\n"]},"metadata":{},"sourceType":"module"}