{"ast":null,"code":"import requests from \"./requests.js\";\nimport axios from \"axios\";\nconst offices = {\n  addOffice: async (userAction, office) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      },\n      body: JSON.stringify(office)\n    };\n    const result = await fetch(requests.Offices.AddOffice, requestOptions).then(async response => {\n      var _response$headers$get;\n\n      const isJson = (_response$headers$get = response.headers.get('content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  deleteOfficeById: async (userAction, office) => {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      },\n      body: JSON.stringify(office)\n    };\n    const result = await fetch(requests.Offices.DeleteOfficeById, requestOptions).then(async response => {\n      var _response$headers$get2;\n\n      const isJson = (_response$headers$get2 = response.headers.get('content-type')) === null || _response$headers$get2 === void 0 ? void 0 : _response$headers$get2.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  getAllOffices: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      }\n    };\n    const result = await fetch(requests.Offices.GetAllOffices, requestOptions).then(async response => {\n      var _response$headers$get3;\n\n      const isJson = (_response$headers$get3 = response.headers.get('content-type')) === null || _response$headers$get3 === void 0 ? void 0 : _response$headers$get3.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  }\n};\nexport default offices;","map":{"version":3,"sources":["/Users/motidahari/projects/inventoryProject/client/src/requests/offices.js"],"names":["requests","axios","offices","addOffice","userAction","office","requestOptions","method","headers","token","userId","body","JSON","stringify","result","fetch","Offices","AddOffice","then","response","isJson","get","includes","data","json","ok","error","errors","status","Promise","reject","catch","deleteOfficeById","DeleteOfficeById","getAllOffices","GetAllOffices"],"mappings":"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","sourcesContent":["import requests from \"./requests.js\";\nimport axios from \"axios\";\n\n\nconst offices = {\n    addOffice: async (userAction, office) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            },\n            body: JSON.stringify(office)\n        };\n        const result = await fetch(requests.Offices.AddOffice, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    deleteOfficeById: async (userAction, office) => {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            },\n            body: JSON.stringify(office)\n        };\n        const result = await fetch(requests.Offices.DeleteOfficeById, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    getAllOffices: async (userAction) => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            }\n        };\n        const result = await fetch(requests.Offices.GetAllOffices, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n};\n\n\nexport default offices"]},"metadata":{},"sourceType":"module"}