{"ast":null,"code":"import requests from \"./requests.js\";\nimport axios from \"axios\";\nimport { body } from \"express-validator\";\nconst products = {\n  addProduct: async (userAction, product) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      },\n      body: JSON.stringify(product)\n    };\n    const result = await fetch(requests.Products.AddProduct, requestOptions).then(async response => {\n      var _response$headers$get;\n\n      const isJson = (_response$headers$get = response.headers.get('content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  UpdateProductLocation: async (userAction, product) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      },\n      body: JSON.stringify(product)\n    };\n    const result = await fetch(requests.Products.UpdateProductLocation, requestOptions).then(async response => {\n      var _response$headers$get2;\n\n      const isJson = (_response$headers$get2 = response.headers.get('content-type')) === null || _response$headers$get2 === void 0 ? void 0 : _response$headers$get2.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  UpdateProduct: async (userAction, product) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      },\n      body: JSON.stringify(product)\n    };\n    const result = await fetch(requests.Products.UpdateProduct, requestOptions).then(async response => {\n      var _response$headers$get3;\n\n      const isJson = (_response$headers$get3 = response.headers.get('content-type')) === null || _response$headers$get3 === void 0 ? void 0 : _response$headers$get3.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  deleteProduct: async (userAction, product) => {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      },\n      body: JSON.stringify(product)\n    };\n    const result = await fetch(requests.Products.DeleteProduct, requestOptions).then(async response => {\n      var _response$headers$get4;\n\n      const isJson = (_response$headers$get4 = response.headers.get('content-type')) === null || _response$headers$get4 === void 0 ? void 0 : _response$headers$get4.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  getAllProducts: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      }\n    };\n    const result = await fetch(requests.Products.getAllProducts, requestOptions).then(async response => {\n      var _response$headers$get5;\n\n      const isJson = (_response$headers$get5 = response.headers.get('content-type')) === null || _response$headers$get5 === void 0 ? void 0 : _response$headers$get5.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  getAllProductsByLocationId: async (userAction, location) => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      }\n    };\n    const result = await fetch(requests.Products.getAllProductsByLocationId + '/' + location.locationId, requestOptions).then(async response => {\n      var _response$headers$get6;\n\n      const isJson = (_response$headers$get6 = response.headers.get('content-type')) === null || _response$headers$get6 === void 0 ? void 0 : _response$headers$get6.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  getProductById: async (userAction, product) => {\n    // console.log('product', product);\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      }\n    };\n    const result = await fetch(requests.Products.getProductById + '/' + product.productId, requestOptions).then(async response => {\n      var _response$headers$get7;\n\n      const isJson = (_response$headers$get7 = response.headers.get('content-type')) === null || _response$headers$get7 === void 0 ? void 0 : _response$headers$get7.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  getProductByParams: async (userAction, params) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      },\n      body: JSON.stringify(params)\n    };\n    const result = await fetch(requests.Products.getAllProductsByParams, requestOptions).then(async response => {\n      var _response$headers$get8;\n\n      const isJson = (_response$headers$get8 = response.headers.get('content-type')) === null || _response$headers$get8 === void 0 ? void 0 : _response$headers$get8.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  getGaps: async (userAction, params) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      },\n      body: JSON.stringify(params)\n    };\n    const result = await fetch(requests.Products.getAllProductsByParams, requestOptions).then(async response => {\n      var _response$headers$get9;\n\n      const isJson = (_response$headers$get9 = response.headers.get('content-type')) === null || _response$headers$get9 === void 0 ? void 0 : _response$headers$get9.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  }\n};\nexport default products;","map":{"version":3,"sources":["/Users/motidahari/projects/inventoryProject/client/src/requests/products.js"],"names":["requests","axios","body","products","addProduct","userAction","product","requestOptions","method","headers","token","userId","JSON","stringify","result","fetch","Products","AddProduct","then","response","isJson","get","includes","data","json","ok","error","errors","status","Promise","reject","catch","UpdateProductLocation","UpdateProduct","deleteProduct","DeleteProduct","getAllProducts","getAllProductsByLocationId","location","locationId","getProductById","productId","getProductByParams","params","getAllProductsByParams","getGaps"],"mappings":"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","sourcesContent":["import requests from \"./requests.js\";\nimport axios from \"axios\";\nimport { body } from \"express-validator\";\n\n\nconst products = {\n    addProduct: async (userAction, product) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            },\n            body: JSON.stringify(product)\n        };\n        const result = await fetch(requests.Products.AddProduct, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    UpdateProductLocation: async (userAction, product) => {\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            },\n            body: JSON.stringify(product)\n        };\n        const result = await fetch(requests.Products.UpdateProductLocation, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    UpdateProduct: async (userAction, product) => {\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            },\n            body: JSON.stringify(product)\n        };\n        const result = await fetch(requests.Products.UpdateProduct, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    deleteProduct: async (userAction, product) => {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            },\n            body: JSON.stringify(product)\n        };\n        const result = await fetch(requests.Products.DeleteProduct, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    getAllProducts: async (userAction) => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            }\n        };\n        const result = await fetch(requests.Products.getAllProducts, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    getAllProductsByLocationId: async (userAction, location) => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            }\n        };\n        const result = await fetch(requests.Products.getAllProductsByLocationId + '/' + location.locationId, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    getProductById: async (userAction, product) => {\n        // console.log('product', product);\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            }\n        };\n        const result = await fetch(requests.Products.getProductById + '/' + product.productId, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    getProductByParams: async (userAction, params) => {\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            },\n            body: JSON.stringify(params)\n        };\n        const result = await fetch(requests.Products.getAllProductsByParams, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    getGaps: async (userAction, params) => {\n        const requestOptions = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            },\n            body: JSON.stringify(params)\n        };\n        const result = await fetch(requests.Products.getAllProductsByParams, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n};\n\n\nexport default products"]},"metadata":{},"sourceType":"module"}