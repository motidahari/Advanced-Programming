{"ast":null,"code":"var _jsxFileName = \"/Users/motidahari/projects/test/client/src/App.js\";\nimport React from 'react';\nimport MediaCard from './MediaCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getQ = () => {\n  return Q[Math.random() * Q.length | 0];\n};\n\nconst getRandomPointer = () => {\n  return parseInt(Math.random() * 20);\n};\n\nconst getRandom2Exponent = max => {\n  return parseInt((Math.random() + 1) * max);\n};\n\nconst getPow = pow => {\n  return Math.pow(2, pow);\n};\n\nconst hex2bin = hex => {\n  return (\"00000000\" + parseInt(hex, 16).toString(2)).substr(-8);\n};\n\nconst random_hex_color_code = () => {\n  let n = (Math.random() * 0xfffff * 1000000).toString(16);\n  return n.slice(0, 6);\n};\n\nconst xor = (a, b, n) => {\n  let ans = \"\"; // Loop to iterate over the\n  // Binary Strings\n\n  for (let i = 0; i < n; i++) {\n    // If the Character matches\n    if (a[i] == b[i]) ans += \"0\";else ans += \"1\";\n  }\n\n  return ans;\n};\n\nconst q1 = () => {\n  let expNume = getRandom2Exponent(8);\n  let expResult = getPow(expNume);\n  const Qnumber = 1;\n  const RandomPointer1 = getRandomPointer();\n  const RandomPointer2 = getRandomPointer();\n  const numPoiners = expResult / 4;\n  let q = `גודל בלוק הוא ${expResult} = ${expNume}^2 ומצביע הוא בגודל 4 בתים.\n  ישנם ${RandomPointer1} מצביעים ישירים ו-${RandomPointer2} מצביעים עקיפים מסוג single indirect\n  מהוא גודל הקובץ המקסימלי במערכת קבצים זו?  \n  `;\n  const answer = `(${RandomPointer1} + ${RandomPointer2} * ${numPoiners}) * ${expResult} = ` + (RandomPointer1 + RandomPointer2 * numPoiners) * expResult;\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer\n  };\n  return result;\n};\n\nconst q2 = () => {\n  const Qnumber = 2; // const val1 = '0x' + random_hex_color_code();\n  // const val2 = '0x' + random_hex_color_code();\n  // const pri = '0x' + random_hex_color_code();\n\n  const val1 = 12;\n  const binVal1 = hex2bin(val1);\n  const val2 = 34;\n  const binVal2 = hex2bin(val2);\n  console.log('random', getRandom2Exponent(100));\n  const pri = 56;\n  const binPri = hex2bin(pri);\n  let q = `RAID4/RAID5\n  גודל כל בלוק הוא בית אחד(8 ביטים)\n  נניח שבלוק הנתונים הכיל 0x${val1} ושינו אותו ל-0x${val2}\n  אם בלוק הזוגיות הכיל 0x${pri} מה הוא יכול אחרי השינוי בבלוק?\n  `;\n  let a = 0;\n  const answer = ` hex(${val1}) = bin(${binVal1}) & hex(${val2}) = bin(${binVal2}) & hex(${pri}) = bin(${binPri})                                                   \n  ${binVal1} xor ${binVal2} = ${a = xor('' + binVal1, '' + binVal2, Math.min(binVal1.length, binVal2.length))}\n  ${binPri} xor ${a} = ${a = xor('' + a, '' + binPri, Math.min(a.length, binPri.length))}\n  result = ${parseInt(a, 2)} \n`;\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer\n  };\n  return result;\n};\n\nlet Q = [q1(), q2()];\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(MediaCard, {\n        q: Q[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(MediaCard, {\n        q: Q[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/motidahari/projects/test/client/src/App.js"],"names":["React","MediaCard","getQ","Q","Math","random","length","getRandomPointer","parseInt","getRandom2Exponent","max","getPow","pow","hex2bin","hex","toString","substr","random_hex_color_code","n","slice","xor","a","b","ans","i","q1","expNume","expResult","Qnumber","RandomPointer1","RandomPointer2","numPoiners","q","answer","result","q2","val1","binVal1","val2","binVal2","console","log","pri","binPri","min","App","marginTop"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MediaCard from './MediaCard';\n\n\n\n\n\nconst getQ = () => {\n  return Q[(Math.random() * Q.length) | 0];\n}\nconst getRandomPointer = () => {\n  return parseInt(Math.random() * 20);\n}\nconst getRandom2Exponent = (max) => {\n  return parseInt(((Math.random() + 1) * max));\n}\nconst getPow = (pow) => {\n  return Math.pow(2, pow)\n}\nconst hex2bin = (hex) => {\n  return (\"00000000\" + (parseInt(hex, 16)).toString(2)).substr(-8);\n}\nconst random_hex_color_code = () => {\n  let n = (Math.random() * 0xfffff * 1000000).toString(16);\n  return n.slice(0, 6);\n};\nconst xor = (a, b, n) => {\n  let ans = \"\";\n\n  // Loop to iterate over the\n  // Binary Strings\n  for (let i = 0; i < n; i++) {\n    // If the Character matches\n    if (a[i] == b[i])\n      ans += \"0\";\n    else\n      ans += \"1\";\n  }\n  return ans;\n}\nconst q1 = () => {\n  let expNume = getRandom2Exponent(8);\n  let expResult = getPow(expNume);\n  const Qnumber = 1;\n  const RandomPointer1 = getRandomPointer();\n  const RandomPointer2 = getRandomPointer();\n  const numPoiners = expResult / 4;\n\n\n  let q = `גודל בלוק הוא ${expResult} = ${expNume}^2 ומצביע הוא בגודל 4 בתים.\n  ישנם ${RandomPointer1} מצביעים ישירים ו-${RandomPointer2} מצביעים עקיפים מסוג single indirect\n  מהוא גודל הקובץ המקסימלי במערכת קבצים זו?  \n  `;\n  const answer = `(${RandomPointer1} + ${RandomPointer2} * ${numPoiners}) * ${expResult} = ` + ((RandomPointer1 + (RandomPointer2 * numPoiners)) * expResult);\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer,\n  };\n  return result;\n}\nconst q2 = () => {\n  const Qnumber = 2;\n  // const val1 = '0x' + random_hex_color_code();\n  // const val2 = '0x' + random_hex_color_code();\n  // const pri = '0x' + random_hex_color_code();\n\n  const val1 = 12;\n  const binVal1 = hex2bin(val1);\n\n  const val2 = 34;\n  const binVal2 = hex2bin(val2);\n  console.log('random', getRandom2Exponent(100));\n  const pri = 56;\n  const binPri = hex2bin(pri);\n\n  let q = `RAID4/RAID5\n  גודל כל בלוק הוא בית אחד(8 ביטים)\n  נניח שבלוק הנתונים הכיל 0x${val1} ושינו אותו ל-0x${val2}\n  אם בלוק הזוגיות הכיל 0x${pri} מה הוא יכול אחרי השינוי בבלוק?\n  `;\n\n\n  let a = 0;\n  const answer = ` hex(${val1}) = bin(${binVal1}) & hex(${val2}) = bin(${binVal2}) & hex(${pri}) = bin(${binPri})                                                   \n  ${binVal1} xor ${binVal2} = ${(a = xor('' + binVal1, '' + binVal2, Math.min(binVal1.length, binVal2.length)))}\n  ${binPri} xor ${a} = ${(a = xor('' + a, '' + binPri, Math.min(a.length, binPri.length)))}\n  result = ${parseInt(a, 2)} \n`;\n  const result = {\n    q: q,\n    Qnumber: Qnumber,\n    answer: answer,\n  };\n  return result;\n}\nlet Q = [\n  q1(),\n  q2(),\n];\n\nconst App = () => {\n  return (\n    <div>\n\n      <div style={{ marginTop: '20px' }}>\n        <MediaCard q={Q[0]} />\n      </div>\n\n      <div style={{ marginTop: '20px' }}>\n        <MediaCard q={Q[1]} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}