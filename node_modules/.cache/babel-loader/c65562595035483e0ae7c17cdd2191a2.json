{"ast":null,"code":"import requests from \"./requests.js\";\nimport axios from \"axios\";\nconst logs = {\n  GetAllLogsProducts: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      }\n    };\n    const result = await fetch(requests.LogsProducts.GetAllLogsProducts, requestOptions).then(async response => {\n      var _response$headers$get;\n\n      const isJson = (_response$headers$get = response.headers.get('content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  GetAllLogsProductsParams: async (userAction, params) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      },\n      body: JSON.stringify(params)\n    };\n    const result = await fetch(requests.LogsProducts.GetAllLogsProductByParams, requestOptions).then(async response => {\n      var _response$headers$get2;\n\n      const isJson = (_response$headers$get2 = response.headers.get('content-type')) === null || _response$headers$get2 === void 0 ? void 0 : _response$headers$get2.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  GetAllLogsMonitoringAmplifiers: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      }\n    };\n    const result = await fetch(requests.LogsProducts.GetAllLogsMonitoringAmplifiers, requestOptions).then(async response => {\n      var _response$headers$get3;\n\n      const isJson = (_response$headers$get3 = response.headers.get('content-type')) === null || _response$headers$get3 === void 0 ? void 0 : _response$headers$get3.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  GetAllLogsProductsAmplifiersMonitoringByParams: async (userAction, params) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      },\n      body: JSON.stringify(params)\n    };\n    const result = await fetch(requests.LogsProducts.GetAllLogsProductAmplifiersMonitoringByParams, requestOptions).then(async response => {\n      var _response$headers$get4;\n\n      const isJson = (_response$headers$get4 = response.headers.get('content-type')) === null || _response$headers$get4 === void 0 ? void 0 : _response$headers$get4.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  GetAllLogsAmplifierTraffic: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      }\n    };\n    const result = await fetch(requests.LogsProducts.GetAllLogsAmplifierTraffic, requestOptions).then(async response => {\n      var _response$headers$get5;\n\n      const isJson = (_response$headers$get5 = response.headers.get('content-type')) === null || _response$headers$get5 === void 0 ? void 0 : _response$headers$get5.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  GetAllLogsProductsAmplifiersTrafficByParams: async (userAction, params) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      },\n      body: JSON.stringify(params)\n    };\n    const result = await fetch(requests.LogsProducts.GetAllLogsProductAmplifiersTrafficByParams, requestOptions).then(async response => {\n      var _response$headers$get6;\n\n      const isJson = (_response$headers$get6 = response.headers.get('content-type')) === null || _response$headers$get6 === void 0 ? void 0 : _response$headers$get6.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  GetAllLogsProductsByLocationId: async (userAction, location) => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        'userId': userAction.userId\n      }\n    };\n    const result = await fetch(`${requests.LogsProducts.GetAllLogsProductsByLocationId}/${location.locationId}`, requestOptions).then(async response => {\n      var _response$headers$get7;\n\n      const isJson = (_response$headers$get7 = response.headers.get('content-type')) === null || _response$headers$get7 === void 0 ? void 0 : _response$headers$get7.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  }\n};\nexport default logs;","map":{"version":3,"sources":["/Users/motidahari/projects/inventoryProject/client/src/requests/logs.js"],"names":["requests","axios","logs","GetAllLogsProducts","userAction","requestOptions","method","headers","token","userId","result","fetch","LogsProducts","then","response","isJson","get","includes","data","json","ok","error","errors","status","Promise","reject","catch","GetAllLogsProductsParams","params","body","JSON","stringify","GetAllLogsProductByParams","GetAllLogsMonitoringAmplifiers","GetAllLogsProductsAmplifiersMonitoringByParams","GetAllLogsProductAmplifiersMonitoringByParams","GetAllLogsAmplifierTraffic","GetAllLogsProductsAmplifiersTrafficByParams","GetAllLogsProductAmplifiersTrafficByParams","GetAllLogsProductsByLocationId","location","locationId"],"mappings":"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","sourcesContent":["import requests from \"./requests.js\";\nimport axios from \"axios\";\n\n\nconst logs = {\n    GetAllLogsProducts: async (userAction) => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            }\n        };\n        const result = await fetch(requests.LogsProducts.GetAllLogsProducts, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    GetAllLogsProductsParams: async (userAction, params) => {\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            },\n            body: JSON.stringify(params)\n        };\n        const result = await fetch(requests.LogsProducts.GetAllLogsProductByParams, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n\n    GetAllLogsMonitoringAmplifiers: async (userAction) => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            }\n        };\n        const result = await fetch(requests.LogsProducts.GetAllLogsMonitoringAmplifiers, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    GetAllLogsProductsAmplifiersMonitoringByParams: async (userAction, params) => {\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            },\n            body: JSON.stringify(params)\n        };\n        const result = await fetch(requests.LogsProducts.GetAllLogsProductAmplifiersMonitoringByParams, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    GetAllLogsAmplifierTraffic: async (userAction) => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            }\n        };\n        const result = await fetch(requests.LogsProducts.GetAllLogsAmplifierTraffic, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    GetAllLogsProductsAmplifiersTrafficByParams: async (userAction, params) => {\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            },\n            body: JSON.stringify(params)\n        };\n        const result = await fetch(requests.LogsProducts.GetAllLogsProductAmplifiersTrafficByParams, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n    GetAllLogsProductsByLocationId: async (userAction, location) => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': userAction.token,\n                'userId': userAction.userId\n            }\n        };\n        const result = await fetch(`${requests.LogsProducts.GetAllLogsProductsByLocationId}/${location.locationId}`, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.errors) || response.status;\n                    return Promise.reject(error);\n                }\n                return data;\n                // console.log(\"data\", data)\n            })\n            .catch(errors => {\n                // console.error(errors);\n                return { errors }\n            });\n        return result;\n    },\n};\n\n\nexport default logs"]},"metadata":{},"sourceType":"module"}