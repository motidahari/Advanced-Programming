{"ast":null,"code":"import requests from './requests.js';\nimport axios from 'axios';\nconst users = {\n  registration: async userData => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    };\n    const result = await fetch(requests.Users.Registration, requestOptions).then(async response => {\n      var _response$headers$get;\n\n      const isJson = (_response$headers$get = response.headers.get('content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  login: async userData => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    };\n    const result = await fetch(requests.Users.Login, requestOptions).then(async response => {\n      var _response$headers$get2;\n\n      const isJson = (_response$headers$get2 = response.headers.get('content-type')) === null || _response$headers$get2 === void 0 ? void 0 : _response$headers$get2.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  deleteUser: async (userAction, userData) => {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      },\n      body: JSON.stringify(userData)\n    };\n    const result = await fetch(requests.Users.Registration, requestOptions).then(async response => {\n      var _response$headers$get3;\n\n      const isJson = (_response$headers$get3 = response.headers.get('content-type')) === null || _response$headers$get3 === void 0 ? void 0 : _response$headers$get3.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  updateUser: async (userAction, userData) => {\n    console.log('userData', userData);\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      },\n      body: JSON.stringify(userData)\n    };\n    const result = await fetch(requests.Users.UpdateUser, requestOptions).then(async response => {\n      var _response$headers$get4;\n\n      const isJson = (_response$headers$get4 = response.headers.get('content-type')) === null || _response$headers$get4 === void 0 ? void 0 : _response$headers$get4.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  getUnapprovedUsers: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      }\n    };\n    const result = await fetch(requests.Users.GetUnapprovedUsers, requestOptions).then(async response => {\n      var _response$headers$get5;\n\n      const isJson = (_response$headers$get5 = response.headers.get('content-type')) === null || _response$headers$get5 === void 0 ? void 0 : _response$headers$get5.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  getAllUsers: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      }\n    }; // console.log('requestOptions', JSON.stringify(requestOptions.headers));\n\n    const result = await fetch(requests.Users.GetAllUsers, requestOptions).then(async response => {\n      var _response$headers$get6;\n\n      const isJson = (_response$headers$get6 = response.headers.get('content-type')) === null || _response$headers$get6 === void 0 ? void 0 : _response$headers$get6.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data;\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  },\n  confirmUser: async (userAction, userData) => {\n    console.log('userData', userData);\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId\n      },\n      body: JSON.stringify(userData)\n    };\n    const result = await fetch(requests.Users.ConfirmUser, requestOptions).then(async response => {\n      var _response$headers$get7;\n\n      const isJson = (_response$headers$get7 = response.headers.get('content-type')) === null || _response$headers$get7 === void 0 ? void 0 : _response$headers$get7.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.errors || response.status;\n        return Promise.reject(error);\n      }\n\n      return data; // console.log(\"data\", data)\n    }).catch(errors => {\n      // console.error(errors);\n      return {\n        errors\n      };\n    });\n    return result;\n  }\n};\nexport default users;","map":{"version":3,"sources":["/Users/motidahari/projects/inventoryProject/client/src/requests/users.js"],"names":["requests","axios","users","registration","userData","requestOptions","method","headers","body","JSON","stringify","result","fetch","Users","Registration","then","response","isJson","get","includes","data","json","ok","error","errors","status","Promise","reject","catch","login","Login","deleteUser","userAction","token","userId","updateUser","console","log","UpdateUser","getUnapprovedUsers","GetUnapprovedUsers","getAllUsers","GetAllUsers","confirmUser","ConfirmUser"],"mappings":"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","sourcesContent":["import requests from './requests.js';\nimport axios from 'axios';\n\nconst users = {\n  registration: async userData => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userData),\n    };\n    const result = await fetch(requests.Users.Registration, requestOptions)\n      .then(async response => {\n        const isJson = response.headers\n          .get('content-type')\n          ?.includes('application/json');\n        const data = isJson && (await response.json());\n\n        // check for error response\n        if (!response.ok) {\n          // get error message from body or default to response status\n          const error = (data && data.errors) || response.status;\n          return Promise.reject(error);\n        }\n        return data;\n        // console.log(\"data\", data)\n      })\n      .catch(errors => {\n        // console.error(errors);\n        return { errors };\n      });\n    return result;\n  },\n  login: async userData => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userData),\n    };\n    const result = await fetch(requests.Users.Login, requestOptions)\n      .then(async response => {\n        const isJson = response.headers\n          .get('content-type')\n          ?.includes('application/json');\n        const data = isJson && (await response.json());\n\n        // check for error response\n        if (!response.ok) {\n          // get error message from body or default to response status\n          const error = data && data.errors;\n          return Promise.reject(error);\n        }\n        return data;\n        // console.log(\"data\", data)\n      })\n      .catch(errors => {\n        // console.error(errors);\n        return { errors };\n      });\n    return result;\n  },\n  deleteUser: async (userAction, userData) => {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n      body: JSON.stringify(userData),\n    };\n    const result = await fetch(requests.Users.Registration, requestOptions)\n      .then(async response => {\n        const isJson = response.headers\n          .get('content-type')\n          ?.includes('application/json');\n        const data = isJson && (await response.json());\n\n        // check for error response\n        if (!response.ok) {\n          // get error message from body or default to response status\n          const error = (data && data.errors) || response.status;\n          return Promise.reject(error);\n        }\n        return data;\n        // console.log(\"data\", data)\n      })\n      .catch(errors => {\n        // console.error(errors);\n        return { errors };\n      });\n    return result;\n  },\n  updateUser: async (userAction, userData) => {\n    console.log('userData', userData);\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n      body: JSON.stringify(userData),\n    };\n    const result = await fetch(requests.Users.UpdateUser, requestOptions)\n      .then(async response => {\n        const isJson = response.headers\n          .get('content-type')\n          ?.includes('application/json');\n        const data = isJson && (await response.json());\n\n        // check for error response\n        if (!response.ok) {\n          // get error message from body or default to response status\n          const error = (data && data.errors) || response.status;\n          return Promise.reject(error);\n        }\n        return data;\n        // console.log(\"data\", data)\n      })\n      .catch(errors => {\n        // console.error(errors);\n        return { errors };\n      });\n    return result;\n  },\n  getUnapprovedUsers: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n    };\n    const result = await fetch(\n      requests.Users.GetUnapprovedUsers,\n      requestOptions\n    )\n      .then(async response => {\n        const isJson = response.headers\n          .get('content-type')\n          ?.includes('application/json');\n        const data = isJson && (await response.json());\n\n        // check for error response\n        if (!response.ok) {\n          // get error message from body or default to response status\n          const error = (data && data.errors) || response.status;\n          return Promise.reject(error);\n        }\n        return data;\n        // console.log(\"data\", data)\n      })\n      .catch(errors => {\n        // console.error(errors);\n        return { errors };\n      });\n    return result;\n  },\n  getAllUsers: async userAction => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n    };\n    // console.log('requestOptions', JSON.stringify(requestOptions.headers));\n    const result = await fetch(requests.Users.GetAllUsers, requestOptions)\n      .then(async response => {\n        const isJson = response.headers\n          .get('content-type')\n          ?.includes('application/json');\n        const data = isJson && (await response.json());\n\n        // check for error response\n        if (!response.ok) {\n          // get error message from body or default to response status\n          const error = (data && data.errors) || response.status;\n          return Promise.reject(error);\n        }\n        return data;\n      })\n      .catch(errors => {\n        // console.error(errors);\n        return { errors };\n      });\n    return result;\n  },\n  confirmUser: async (userAction, userData) => {\n    console.log('userData', userData);\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': userAction.token,\n        userId: userAction.userId,\n      },\n      body: JSON.stringify(userData),\n    };\n    const result = await fetch(requests.Users.ConfirmUser, requestOptions)\n      .then(async response => {\n        const isJson = response.headers\n          .get('content-type')\n          ?.includes('application/json');\n        const data = isJson && (await response.json());\n\n        // check for error response\n        if (!response.ok) {\n          // get error message from body or default to response status\n          const error = (data && data.errors) || response.status;\n          return Promise.reject(error);\n        }\n        return data;\n        // console.log(\"data\", data)\n      })\n      .catch(errors => {\n        // console.error(errors);\n        return { errors };\n      });\n    return result;\n  },\n};\n\nexport default users;\n"]},"metadata":{},"sourceType":"module"}